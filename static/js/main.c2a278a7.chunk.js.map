{"version":3,"sources":["MovieContext.js","Movie.js","MovieList.js","Nav.js","AddMovies.js","App.js","serviceWorker.js","index.js"],"names":["MovieContext","createContext","MovieProvider","props","useState","name","price","id","movies","setMovies","Provider","value","children","Movie","className","MovieList","useContext","map","movie","key","Nav","length","AddMovie","setName","setPrice","onSubmit","e","preventDefault","prevMovies","type","onChange","target","App","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"0QAEaA,EAAeC,0BAEfC,EAAgB,SAACC,GAAW,IAAD,EAERC,mBAAS,CACjC,CACIC,KAAM,eACNC,MAAO,MACPC,GAAI,OAER,CACIF,KAAM,WACNC,MAAO,MACPC,GAAI,OAER,CACIF,KAAM,oBACNC,MAAO,MACPC,GAAI,SAhBwB,mBAE7BC,EAF6B,KAErBC,EAFqB,KAmBpC,OACI,kBAACT,EAAaU,SAAd,CAAuBC,MAAO,CAACH,EAAQC,IAClCN,EAAMS,WCbJC,EATD,SAAC,GAAqB,IAAnBR,EAAkB,EAAlBA,KAAMC,EAAY,EAAZA,MACnB,OACI,yBAAKQ,UAAU,0EACX,4BAAKT,GACL,2BAAIC,KCQDS,EAXG,WAAO,IAAD,EACQC,qBAAWhB,GADnB,mBACbQ,EADa,UAEpB,OACI,6BACKA,EAAOS,IAAI,SAAAC,GAAK,OACb,kBAAC,EAAD,CAAOb,KAAMa,EAAMb,KAAMC,MAAOY,EAAMZ,MAAOa,IAAKD,EAAMX,SCKzDa,EAXH,WAAO,IAAD,EACcJ,qBAAWhB,GADzB,mBACPQ,EADO,UAEd,OACI,yBAAKM,UAAU,UACX,wBAAIA,UAAU,kCAAd,UACA,yBAAKA,UAAU,aACX,6CAAmBN,EAAOa,W,OCkB3BC,EAxBE,WAAO,IAAD,EAEKlB,mBAAS,IAFd,mBAEZC,EAFY,KAENkB,EAFM,OAGOnB,mBAAS,IAHhB,mBAGZE,EAHY,KAGLkB,EAHK,OAISR,qBAAWhB,GAJpB,mBAIJS,GAJI,WAgBnB,OACI,0BAAMgB,SALQ,SAACC,GACfA,EAAEC,iBACFlB,EAAU,SAAAmB,GAAU,4BAAQA,GAAR,CAAoB,CAAEvB,KAAMA,EAAMC,MAAOA,SAIzD,2BAAOuB,KAAK,OAAOxB,KAAK,OAAOM,MAAON,EAAMyB,SAZjC,SAACJ,GAChBH,EAAQG,EAAEK,OAAOpB,UAYb,2BAAOkB,KAAK,OAAOxB,KAAK,QAAQM,MAAOL,EAAOwB,SAVlC,SAACJ,GACjBF,EAASE,EAAEK,OAAOpB,UAUd,4BAAQG,UAAU,mBAAlB,SCHGkB,MAZf,WACE,OACE,kBAAC,EAAD,KACE,yBAAKlB,UAAU,OACb,kBAAC,EAAD,MACA,kBAAC,EAAD,MACA,kBAAC,EAAD,SCFYmB,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC,iB","file":"static/js/main.c2a278a7.chunk.js","sourcesContent":["import React, { useState, createContext } from 'react';\r\n\r\nexport const MovieContext = createContext();\r\n\r\nexport const MovieProvider = (props) => {\r\n\r\n    const [movies, setMovies] = useState([\r\n        {\r\n            name: 'Harry Potter',\r\n            price: '$10',\r\n            id: 12131\r\n        },\r\n        {\r\n            name: 'SuperMan',\r\n            price: '$20',\r\n            id: 14654\r\n        },\r\n        {\r\n            name: 'Detective Pikachu',\r\n            price: '$30',\r\n            id: 12189\r\n        }\r\n    ]);\r\n    return (\r\n        <MovieContext.Provider value={[movies, setMovies]}>\r\n            {props.children}\r\n        </MovieContext.Provider>\r\n    );\r\n\r\n}","import React, { useState } from 'react';\r\nimport { MovieContext } from './MovieContext';\r\n\r\nconst Movie = ({ name, price }) => {\r\n    return (\r\n        <div className=\"d-flex align-items-center flex-column text-dark justify-content-center\">\r\n            <h3>{name}</h3>\r\n            <p>{price}</p>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Movie;","import React, { useState, useContext } from 'react';\r\nimport Movie from './Movie';\r\nimport { MovieContext } from './MovieContext';\r\n\r\nconst MovieList = () => {\r\n    const [movies, setMovies] = useContext(MovieContext);\r\n    return (\r\n        <div>\r\n            {movies.map(movie => (\r\n                <Movie name={movie.name} price={movie.price} key={movie.id} />\r\n            ))}\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default MovieList;","import React, { useContext } from 'react';\r\nimport { MovieContext } from './MovieContext';\r\n\r\nconst Nav = () => {\r\n    const [movies, setMovies] = useContext(MovieContext);\r\n    return (\r\n        <div className='Navbar'>\r\n            <h3 className=\"d-flex align-items-center ml-5\">DevSub</h3>\r\n            <div className=\"container\">\r\n                <p>No. of movies: {movies.length}</p>\r\n            </div>\r\n        </div>\r\n    );\r\n}\r\nexport default Nav;","import React, { useState, useContext } from 'react';\r\nimport { MovieContext } from './MovieContext';\r\n\r\nconst AddMovie = () => {\r\n\r\n    const [name, setName] = useState('');\r\n    const [price, setPrice] = useState('');\r\n    const [movies, setMovies] = useContext(MovieContext);\r\n\r\n    const updateName = (e) => {\r\n        setName(e.target.value);\r\n    }\r\n    const updatePrice = (e) => {\r\n        setPrice(e.target.value);\r\n    }\r\n    const addMovies = (e) => {\r\n        e.preventDefault();\r\n        setMovies(prevMovies => [...prevMovies, { name: name, price: price }]); //...prevMovies <= is a replica of previous object\r\n    }\r\n    return (\r\n        <form onSubmit={addMovies}>\r\n            <input type=\"text\" name=\"name\" value={name} onChange={updateName} />\r\n            <input type=\"text\" name=\"price\" value={price} onChange={updatePrice} />\r\n            <button className=\"btn btn-primary\">Add</button>\r\n        </form>\r\n    );\r\n}\r\nexport default AddMovie;","import React from 'react';\r\nimport './App.css';\r\nimport Movies from './MovieList'\r\nimport MovieList from './MovieList';\r\nimport { MovieProvider } from './MovieContext';\r\nimport Nav from './Nav';\r\nimport AddMovie from './AddMovies';\r\n\r\nfunction App() {\r\n  return (\r\n    <MovieProvider>\r\n      <div className=\"App\">\r\n        <Nav />\r\n        <AddMovie />\r\n        <Movies />\r\n      </div>\r\n    </MovieProvider >\r\n  );\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.1/8 is considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl)\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}